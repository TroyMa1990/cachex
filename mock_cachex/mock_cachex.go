// Code generated by MockGen. DO NOT EDIT.
// Source: cachex.go

// Package mock_cachex is a generated GoMock package.
package mock_cachex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStorage) Get(key interface{}) (interface{}, bool, error) {
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), key)
}

// Set mocks base method
func (m *MockStorage) Set(key, value interface{}) error {
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockStorageMockRecorder) Set(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), key, value)
}

// MockDeletableStorage is a mock of DeletableStorage interface
type MockDeletableStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDeletableStorageMockRecorder
}

// MockDeletableStorageMockRecorder is the mock recorder for MockDeletableStorage
type MockDeletableStorageMockRecorder struct {
	mock *MockDeletableStorage
}

// NewMockDeletableStorage creates a new mock instance
func NewMockDeletableStorage(ctrl *gomock.Controller) *MockDeletableStorage {
	mock := &MockDeletableStorage{ctrl: ctrl}
	mock.recorder = &MockDeletableStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeletableStorage) EXPECT() *MockDeletableStorageMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDeletableStorage) Get(key interface{}) (interface{}, bool, error) {
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockDeletableStorageMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeletableStorage)(nil).Get), key)
}

// Set mocks base method
func (m *MockDeletableStorage) Set(key, value interface{}) error {
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockDeletableStorageMockRecorder) Set(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDeletableStorage)(nil).Set), key, value)
}

// Del mocks base method
func (m *MockDeletableStorage) Del(key interface{}) error {
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockDeletableStorageMockRecorder) Del(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockDeletableStorage)(nil).Del), key)
}

// MockQuerier is a mock of Querier interface
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockQuerier) Query(key interface{}) (interface{}, bool, error) {
	ret := m.ctrl.Call(m, "Query", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockQuerierMockRecorder) Query(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQuerier)(nil).Query), key)
}
