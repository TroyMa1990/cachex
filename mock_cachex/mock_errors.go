// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wencan/cachex (interfaces: Expired,NotFound)

// Package mock_cachex is a generated GoMock package.
package mock_cachex

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExpired is a mock of Expired interface
type MockExpired struct {
	ctrl     *gomock.Controller
	recorder *MockExpiredMockRecorder
}

// MockExpiredMockRecorder is the mock recorder for MockExpired
type MockExpiredMockRecorder struct {
	mock *MockExpired
}

// NewMockExpired creates a new mock instance
func NewMockExpired(ctrl *gomock.Controller) *MockExpired {
	mock := &MockExpired{ctrl: ctrl}
	mock.recorder = &MockExpiredMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpired) EXPECT() *MockExpiredMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockExpired) Error() string {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockExpiredMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockExpired)(nil).Error))
}

// Expired mocks base method
func (m *MockExpired) Expired() {
	m.ctrl.Call(m, "Expired")
}

// Expired indicates an expected call of Expired
func (mr *MockExpiredMockRecorder) Expired() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expired", reflect.TypeOf((*MockExpired)(nil).Expired))
}

// MockNotFound is a mock of NotFound interface
type MockNotFound struct {
	ctrl     *gomock.Controller
	recorder *MockNotFoundMockRecorder
}

// MockNotFoundMockRecorder is the mock recorder for MockNotFound
type MockNotFoundMockRecorder struct {
	mock *MockNotFound
}

// NewMockNotFound creates a new mock instance
func NewMockNotFound(ctrl *gomock.Controller) *MockNotFound {
	mock := &MockNotFound{ctrl: ctrl}
	mock.recorder = &MockNotFoundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotFound) EXPECT() *MockNotFoundMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockNotFound) Error() string {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockNotFoundMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockNotFound)(nil).Error))
}

// NotFound mocks base method
func (m *MockNotFound) NotFound() {
	m.ctrl.Call(m, "NotFound")
}

// NotFound indicates an expected call of NotFound
func (mr *MockNotFoundMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockNotFound)(nil).NotFound))
}
